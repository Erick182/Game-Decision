# app.py

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="An√°lise Preditiva no Basquete", layout="wide")
st.title("üèÄ Dashboard Anal√≠tico - Diagn√≥stico T√°tico no Basquete")

# Carregamento dos dados
df = pd.read_csv("dados_limpos_nba.csv")

# Exibi√ß√£o inicial dos dados
st.subheader("üìä Dados Brutos")
st.dataframe(df.head())

# Visualiza√ß√£o 1: Correla√ß√£o entre vari√°veis
st.subheader("üìà Correla√ß√£o entre vari√°veis")
corr = df[['FG_PCT', 'FT_PCT', 'AST', 'TOV']].corr()
fig_corr, ax = plt.subplots()
sns.heatmap(corr, annot=True, cmap="Blues", ax=ax)
st.pyplot(fig_corr)

# Visualiza√ß√£o 2: Assist√™ncias vs Turnovers
st.subheader("üéØ Assist√™ncias vs Turnovers")
fig_scatter = px.scatter(df, x="AST", y="TOV", color="FG_PCT",
                         title="Assist√™ncias x Erros com base no aproveitamento de arremessos")
st.plotly_chart(fig_scatter)

# Visualiza√ß√£o 3: Diagn√≥stico Preditivo
st.subheader("üîç Diagn√≥stico de Jogadas Bem-sucedidas (Modelo Preditivo)")

# Criar coluna-alvo
df['LABEL'] = df['FG_PCT'].apply(lambda x: 1 if x > 0.45 else 0)
X = df[['FT_PCT', 'AST', 'TOV', 'MIN']]
y = df['LABEL']

# Treinamento (simples para demo)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
modelo = LogisticRegression()
modelo.fit(X_train, y_train)

# Previs√£o e exibi√ß√£o
df['PREV'] = modelo.predict(X)
df['ALERTA'] = df['PREV'].apply(lambda x: "üî¥ Ineficiente" if x == 0 else "üü¢ Eficiente")
st.write("Legenda de alerta: Jogadas com FG% <= 45% s√£o consideradas ineficientes.")

st.dataframe(df[['PLAYER_NAME', 'TEAM_ABBREVIATION', 'MIN', 'FG_PCT', 'AST', 'TOV', 'PREV', 'ALERTA']].head(20))

# Visualiza√ß√£o 4: Gr√°fico de desempenho m√©dio por tempo
st.subheader("‚è±Ô∏è Desempenho M√©dio (FG%) por Tempo em Quadra")
fig_fg = px.line(df.sort_values('MIN'), x='MIN', y='FG_PCT', title="FG% por Minutos em Quadra")
st.plotly_chart(fig_fg)

st.header("üéØ Filtro de Efici√™ncia dos Jogadores")

filtro = st.selectbox(
    "Selecione o tipo de jogador para visualiza√ß√£o:",
    ["Todos", "Apenas eficientes (üü¢)", "Apenas ineficientes (üî¥)"]
)

if filtro == "Apenas eficientes (üü¢)":
    df_filtrado = df[df['PREV'] == 1]
elif filtro == "Apenas ineficientes (üî¥)":
    df_filtrado = df[df['PREV'] == 0]
else:
    df_filtrado = df

# Tabela com os jogadores filtrados
st.subheader("üìã Jogadores selecionados")
st.dataframe(
    df_filtrado[['PLAYER_NAME', 'TEAM_ABBREVIATION', 'MIN', 'FG_PCT', 'AST', 'TOV', 'ALERTA']]
    .sort_values(by='FG_PCT', ascending=False)
    .reset_index(drop=True)
)

# -------------------------------
# üìä M√≥dulo: Gr√°fico por efici√™ncia
# -------------------------------

st.header("üìä Gr√°fico de FG% dos Jogadores Filtrados")

top = st.slider("Quantos jogadores deseja exibir no gr√°fico?", 5, 30, 10)

df_top = df_filtrado[['PLAYER_NAME', 'FG_PCT']].sort_values(by='FG_PCT', ascending=False).head(top)

fig_bar = px.bar(
    df_top, x='PLAYER_NAME', y='FG_PCT', color='FG_PCT',
    title='FG% dos jogadores selecionados',
    labels={'PLAYER_NAME': 'Jogador', 'FG_PCT': 'Field Goal %'}
)

st.plotly_chart(fig_bar)

st.header("üìâ Dispers√£o: Assist√™ncias vs Turnovers")

st.markdown(
    """
    Este gr√°fico mostra a rela√ß√£o entre **assist√™ncias (AST)** e **turnovers (TOV)** para cada jogador,
    com a **cor indicando o FG%**. Isso ajuda a identificar jogadores que contribuem com o time sem desperdi√ßar posses.
    """
)

fig_disp = px.scatter(
    df,
    x='AST',
    y='TOV',
    color='FG_PCT',
    hover_name='PLAYER_NAME',
    title='Assist√™ncias vs Turnovers com FG%',
    labels={
        'AST': 'Assist√™ncias',
        'TOV': 'Turnovers',
        'FG_PCT': 'Field Goal %'
    },
    color_continuous_scale='RdYlGn',
    height=600
)

st.plotly_chart(fig_disp)

st.header("‚è±Ô∏è Desempenho por Tempo em Quadra (FG% x Minutos)")

st.markdown(
    """
    Este gr√°fico mostra como o aproveitamento de arremessos (**FG%**) varia de acordo com o tempo em quadra (**MIN**).
    Isso ajuda a identificar padr√µes de desgaste, efici√™ncia em minutos reduzidos e perfil t√°tico dos jogadores.
    """
)

# Arredondar os minutos para facilitar agrupamento (ex: grupos de 5 em 5 minutos)
df['MIN_ROUND'] = df['MIN'].apply(lambda x: round(x / 5) * 5)

# Agrupar e calcular m√©dia do FG% por faixa de minutos
df_fgmin = df.groupby('MIN_ROUND')['FG_PCT'].mean().reset_index()

# Gr√°fico de linha
fig_line = px.line(
    df_fgmin,
    x='MIN_ROUND',
    y='FG_PCT',
    markers=True,
    title='M√©dia de FG% por Faixa de Minutos em Quadra',
    labels={'MIN_ROUND': 'Minutos (faixa)', 'FG_PCT': 'Aproveitamento FG%'}
)

st.plotly_chart(fig_line)



st.header("üîç Diagn√≥stico Individual de Jogadores")

def diagnostico_jogador(df, nome_jogador):
    jogador = df[df['PLAYER_NAME'].str.lower() == nome_jogador.lower()]

    if jogador.empty:
        st.warning(f"Jogador '{nome_jogador}' n√£o encontrado.")
        return

    # Usar m√©dias por jogo (se tiver GP = Games Played)
    gp = jogador['GP'].mean() if 'GP' in df.columns else None

    if gp is None or gp == 0:
        st.warning("N√∫mero de jogos (GP) n√£o dispon√≠vel. N√£o √© poss√≠vel calcular m√©dias por jogo corretamente.")
        return

    # Convers√£o para m√©dias por jogo
    fg = jogador['FG_PCT'].mean()
    ft = jogador['FT_PCT'].mean() if 'FT_PCT' in df.columns else None
    ast_pg = jogador['AST'].sum() / gp
    tov_pg = jogador['TOV'].sum() / gp
    min_pg = jogador['MIN'].sum() / gp

    # Benchmarks realistas por jogo
    media_fg = 0.45
    media_ft = 0.75
    media_ast = 3.0
    media_tov = 2.0

    st.markdown(f"### Diagn√≥stico para **{nome_jogador.title()}**")

    if fg < media_fg:
        st.write(f"- ‚ö†Ô∏è FG% baixo: **{fg:.2f}** (ideal: > {media_fg})")
    else:
        st.write(f"- ‚úÖ Bom FG%: **{fg:.2f}**")

    if ft is not None:
        if ft < media_ft:
            st.write(f"- ‚ö†Ô∏è FT% abaixo do ideal: **{ft:.2f}** (ideal: > {media_ft})")
        else:
            st.write(f"- ‚úÖ Bom FT%: **{ft:.2f}**")

    if ast_pg < media_ast:
        st.write(f"- ‚ö†Ô∏è Poucas assist√™ncias por jogo: **{ast_pg:.1f}** (ideal: > {media_ast})")
    else:
        st.write(f"- ‚úÖ Assist√™ncias por jogo: **{ast_pg:.1f}**")

    if tov_pg > media_tov:
        st.write(f"- ‚ö†Ô∏è Muitos turnovers por jogo: **{tov_pg:.1f}** (ideal: < {media_tov})")
    else:
        st.write(f"- ‚úÖ Turnovers sob controle: **{tov_pg:.1f}**")

    st.write(f"- üïí Minutos por jogo: **{min_pg:.1f}**")

    st.markdown("---")
